import sqlite3
from typing import Any, Dict
from src.StorageManager import StorageManager
from src.Project import Project

class ProjectManager(StorageManager):
    """Manages storage and retrieval of Project objects in the database."""
    def __init__(self, db_path="projects.db") -> None:
        super().__init__(db_path)

    def _retrieve_id(self, cursor: sqlite3.Cursor, row: Dict[str, Any]) -> None:
        """
        Retrieves the autogenerated id from the cursor used on DB insert.

        This is called by StorageManager.set() after an insert operation 
        to update the object's id attribute with the value assigned by the database.
        """
        row["id"] = cursor.lastrowid

    @property
    def create_table_query(self) -> str:
        """Returns the SQL query to create the projects table."""
        return """CREATE TABLE IF NOT EXISTS projects (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL, 
        file_path TEXT NOT NULL, 
        root_folder TEXT, 
        num_files INTEGER,
        size_kb INTEGER,
        author_count INTEGER,
        authors TEXT,
        languages TEXT, 
        frameworks TEXT, 
        skills_used TEXT, 
        individual_contributions TEXT, 
        collaboration_status TEXT,
        date_created TEXT, 
        last_modified TEXT, 
        last_accessed TEXT
        )"""
    
    @property
    def table_name(self) -> str:
        """Name of the table used for projects."""
        return "projects"
    
    @property
    def primary_key(self) -> str:
        """Primary key column for the projects table."""
        return "id"
    
    @property
    def columns(self) -> str:
        """Comma-separated list of column names for project storage."""
        return (
            "name, file_path, root_folder, num_files, size_kb, author_count, "
            "authors, languages, frameworks, skills_used, individual_contributions, "
            "collaboration_status, date_created, last_modified, last_accessed"
        )

    def set(self, proj: Project) -> None:
        """
        Store a Project in the database.

        Inserts a new project record and updates the Project object with its 
        autogenerated ID.
        """
        project_dict = proj.to_dict()
        super().set(project_dict)
        proj.id = project_dict["id"]
        return
        
    def get(self, id: int) -> Project:
        """Retrieve a Project from the database by its id."""
        file_dict = super().get(id)
        if file_dict is None:
            return None
        file = Project.from_dict(file_dict)
        return file




